ArrayList to reverse => use set function to set the index and number and also use the swap function custom to reverse 
the whole intuition behind this algorithm is to find the longest prefix that matches the number and then swap the just greatest number before that and then 
sort the after  numbers as they all are in descending order becuase above step we have checked that only...



import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> permutation) 
	{
		// Write your code here.
		if(permutation == null || permutation.size() <= 1) {
            return permutation;
        }

        int i = permutation.size() - 2;
        while(i >= 0 && permutation.get(i) >= permutation.get(i + 1)) {
            i--;
        }

        if(i >= 0) {
            int j = permutation.size() - 1;
            while(permutation.get(j) <= permutation.get(i)) {
                j--;
            }
            swap(permutation, i, j);
        }

        reverse(permutation, i + 1, permutation.size() - 1);
		return permutation;
	}

	public static void swap(ArrayList<Integer> nums, int i, int j) {
        int temp = nums.get(i);
        nums.set(i, nums.get(j));
        nums.set(j, temp);
    }

	public static void reverse(ArrayList<Integer> nums, int i, int j) {
        while(i < j) {
            swap(nums, i++, j--);
        }
    }
}
